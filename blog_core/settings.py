"""
Django settings for blog_core project.
Generated by 'django-admin startproject' using Django 4.1.6.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-=8^f1+pmts+x(dr6dq^-4+8p!849$t&9gw(a8-p@p=lf492sbi")
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.environ["DEBUG_VALUE"] == "TRUE"

# For example, for a site URL at 'web-production-3640.up.railway.app'
# (replace the string below with your own site URL):
# ALLOWED_HOSTS = ['web-production-fb9a6.up.railway.app', '127.0.0.1']
# During development, you can instead set just the base URL
# (you might decide to change the site a few times).
# ALLOWED_HOSTS = ['.railway.com','127.0.0.1']
# Set hosts to allow any app on Railway and the local testing URL
# ALLOWED_HOSTS = ['.railway.app', '127.0.0.1']


# For example, for a site URL is at 'web-production-3640.up.railway.app'
# (replace the string below with your own site URL):
# CSRF_TRUSTED_ORIGINS = ['https://web-production-fb9a6.up.railway.app']

# During development/for this tutorial you can instead set just the base URL
# CSRF_TRUSTED_ORIGINS = ['https://*.railway.app']
# Set CSRF trusted origins to allow any app on Railway and the local testing URL
# CSRF_TRUSTED_ORIGINS = ['https://*.railway.app', 'https://*.127.0.0.1']
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")

if DEBUG:
    ALLOWED_HOSTS = ["*"]

    INTERNAL_IPS = ["127.0.0.1"]
    DEBUG_TOOLBAR_CONFIG = {"INTERCEPT_REDIRECTS": False}

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Django contrib sites
    "django.contrib.sites",
    # My apps:
    "blog_app",
    "blog_users",
    "widget_tweaks",
    "storages",
]

if DEBUG:
    # INSTALLED_APPS += ["debug_toolbar"]
    INSTALLED_APPS.append("debug_toolbar")
    INSTALLED_APPS.append("django_celery_results")


SITE_ID = 1

AUTH_USER_MODEL = "blog_users.BlogUser"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    # MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = "blog_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            (os.path.join(BASE_DIR, "templates")),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "blog_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3_old",
    }
}


# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.environ.get("NAME_DB"),
#         "USER": os.environ.get("USER_DB"),
#         "PASSWORD": os.environ.get("PASSWORD_DB"),
#         "HOST": os.environ.get("HOST_DB"),
#         "PORT": os.environ.get("PORT_DB"),
#         "TEST": {
#             "NAME": "test_blog_app_db",
#             "USER": "postgres",
#             "PASSWORD": "",
#         },
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Kiev"

USE_I18N = True
USE_L10N = True
USE_THOUSAND_SEPARATOR = True

USE_TZ = True

# Redirect to home URL after login (Default redirects to /accounts/profile/)
# LOGIN_REDIRECT_URL = '/'
LOGIN_URL = "/blog_users/login/"


# # Celery Configuration Options
# CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60
# # CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# # CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")  # ToDo: Provide Security in real Project!
# # CELERY_RESULT_BACKEND = 'amqp://localhost:5672'
# CELERY_RESULT_BACKEND = 'django-db'
# # CELERY_BROKER_URL = 'redis://localhost:6379/0'
# # CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")  # ToDo: Provide Security in real Project!
# CELERY_BROKER_URL = 'amqp://localhost:5672'
# CELERY_CACHE_BACKEND = "django-cache"
# CELERY_ACCEPT_CONTENT = ["application/json"]
# CELERY_TASK_SERIALIZER = "json"
# CELERY_RESULT_SERIALIZER = "json"
# CELERY_TIMEZONE = 'Europe/Kiev'


# Cache time to live is 15 seconds:
# CACHE_TTL = 15
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }


# Static files (CSS, JavaScript, Images)
if not DEBUG:
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_URL = 'https://bahw-18-static.s3.amazonaws.com/'
    AWS_DEFAULT_ACL = None
    AWS_S3_REGION_NAME = 'eu-north-1'
    STATIC_URL = AWS_URL + '/static/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = AWS_URL + '/media/'
    # DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    
    #######

    
    # AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME

    # AWS_S3_OBJECT_PARAMETERS = {
    #     "CacheControl": "max-age=86400",
    # }
    # AWS_LOCATION = "static"
    # STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    # STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

    DEFAULT_FILE_STORAGE = "blog_core.storage_backends.MediaStorage"

else:
    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/
    STATIC_URL = "static/"
    STATICFILES_DIRS = (BASE_DIR / "static",)

    MEDIA_ROOT = BASE_DIR / "media"
    MEDIA_URL = "/media/"

# Simplified static file serving.
# https://pypi.org/project/whitenoise/
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Add to test email:
if not DEBUG:
    DEFAULT_FROM_EMAIL = "Blog Application <noreply@blogapplication.com>"
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.environ.get("EMAIL_HOST")
    EMAIL_USE_TLS = True
    EMAIL_PORT = os.environ.get("EMAIL_PORT")
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    EMAIL_HOST_USER = "admin@admin.com"

# SESSION_SAVE_EVERY_REQUEST = True

# Update database configuration from $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=600)
DATABASES["default"].update(db_from_env)
